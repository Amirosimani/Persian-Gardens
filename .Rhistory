sudo apt-get install git-core
library(dplyr)
library(dplyr)
library(RSQLite)
install.packages("DBI")
getwd()
library(RSQLite)
install.packages("RSQLite")
View(female)
View(lawf)
View(lawf)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
library(stats)
library(dplyr)
library(RSQLite)
library(lubridate)
library(ggplot2)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#parsing date
for (i in 1:nrow(docs)) {
arrive <- ymd_hms(docs$date, tz = "Pacific/Auckland")
time <- hour(arrive)
time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(docs$date, "%Y-%m-%d %H:%M:%S")))
date[complete.cases(date)]
date <-date[complete.cases(date)]
stripped_date = data.frame(date, time)
}
#Clean up connection to the database
dbDisconnect(connection)
library(dplyr)
library(RSQLite)
install.packages("markdown")
library(markdown)
rmarkdown::render
load("~/Dropbox/Fall 2015/Stat communication/sessions/11b/webscraping_in.md.txt")
rmarkdown::render(./webscraping_in.md)
rmarkdown::render(./webscraping_in.md)
webpage <- html("http://www.reed.edu/ir/geographic_states.html")
library(rvest)
install.packages("rvest")
library(rvest)
install.packages("xml2")
library(xml2)
library(rvest)
library(dplyr)
library(stats)
library(base)
library(dplyr)
webpage <- html("http://www.reed.edu/ir/geographic_states.html")
help("Deprecated")
webpage <- read_html("http://www.reed.edu/ir/geographic_states.html")
state <- webpage %>% html_nodes("table") %>% .[[1]] %>% html_table()
View(state)
head(state)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
movie <- read_html("http://www.imdb.com/name/nm0001618/?ref_=nv_sr_1")
list_of_movies %>%
html_nodes("#filmo-head-actor") %>%
html_text()
Acotr <- read_html("http://www.imdb.com/name/nm0001618/?ref_=nv_sr_1")
list_of_movies %>%
html_nodes("#filmo-head-actor") %>%
html_text()
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_nodes("#titleCast .itemprop span") %>%
html_text()
lego_movie %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
html_nodes("#boardsTeaser") %>%
.[[3]] %>%
html_table()
table
table
html_nodes("table") %>%
.[[3]] %>%
html_table()
lego_movie %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
lego_movie %>%
html_nodes("#boardsTeaser") %>%
.[[3]] %>%
html_table()
actor <- html("http://www.imdb.com/name/nm0001618/?ref_=nv_sr_1")
actor <- read_html("http://www.imdb.com/name/nm0001618/?ref_=nv_sr_1")
movie %>%
html_nodes(".article") %>%
.[[3]] %>%
html_table()
url <- "http://www.tripadvisor.com/Hotel_Review-g37209-d1762915-Reviews-JW_Marriott_Indianapolis-Indianapolis_Indiana.html"
reviews <- url %>%
read_html() %>%
html_nodes("#REVIEWS .innerBubble")
id <- reviews %>%
html_node(".quote a") %>%
html_attr("id")
quote <- reviews %>%
html_node(".quote span") %>%
html_text()
rating <- reviews %>%
html_node(".rating .rating_s_fill") %>%
html_attr("alt") %>%
gsub(" of 5 stars", "", .) %>%
as.integer()
date <- reviews %>%
html_node(".rating .ratingDate") %>%
html_attr("title") %>%
strptime("%b %d, %Y") %>%
as.POSIXct()
review <- reviews %>%
html_node(".entry .partial_entry") %>%
html_text()
data.frame(id, quote, rating, date, review, stringsAsFactors = FALSE) %>% View()
library(twitteR)
install.packages("twitteR")
library(twitteR)
library(dplyr)
library(twitteR)
library(lubridate)
library(RJSONIO)
library(ggplot2)
library(dismo)
install.packages("dismo")
library(dismo)
library(sp)
library(raster)
library(dismo)
library(maps)
install.packages("maps")
library(maps)
searchTerms<-c("chemical weapons", "cw", "opcw")
names(searchTerms)<-searchTerms
searchTerms<-c("chemical weapons", "cw", "opcw")
names(searchTerms)<-searchTerms
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=1000)
})
})
searchTerms<-c("flu", "cold", "nausea", "vomiting", "headache")
names(searchTerms)<-searchTerms
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=1000)
})
searchTwitter("#beer", n=100)
consumerKey = "TnhFkCkWw5XiRjaaU6MVFJXrb"   # from your app name
consumerSecret = "8T2gfZ7hpCRAYcBQbkfURnyT3ylaHEa8BsO2akLz6gll6kN2OM"
accessToken = "377053028-LZYBzp2rcwn3sG103AVVdUvWHYrOBHLhNPP2wq5S"
accessSecret = "eFD67fq59GaltQj45I5F5eT8wEEdlCxEG3bRE3qod8ZVo"
setup_twitter_oauth(consumer_key = consumerKey, consumer_secret = consumerSecret,
access_token = accessToken, access_secret = accessSecret)
searchTwitter("#beer", n=100)
searchTerms<-c("flu", "cold", "nausea", "vomiting", "headache")
names(searchTerms)<-searchTerms
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=1000)
})
flu
print flu
print "flu
searchTwitter("#beer", n=100)
library(sp)
library(raster)
library(twitteR)
library(lubridate)
library(RJSONIO)
library(ggplot2)
library(dismo)
library(maps)
consumerKey = "TnhFkCkWw5XiRjaaU6MVFJXrb"   # from your app name
consumerSecret = "8T2gfZ7hpCRAYcBQbkfURnyT3ylaHEa8BsO2akLz6gll6kN2OM"
accessToken = "377053028-LZYBzp2rcwn3sG103AVVdUvWHYrOBHLhNPP2wq5S"
accessSecret = "eFD67fq59GaltQj45I5F5eT8wEEdlCxEG3bRE3qod8ZVo"
setup_twitter_oauth(consumer_key = consumerKey, consumer_secret = consumerSecret,
access_token = accessToken, access_secret = accessSecret)
searchTwitter("#beer", n=100)
searchTerms<-c("flu")
names(searchTerms)<-searchTerms
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=10)
})
rate.limit <- getCurRateLimitInfo()
View(rate.limit)
rate.limit[rate.limit$limit != rate.limit$remaining,]
tweetFrames<-lapply(searchResults, twListToDF)
searchTerms<-c("flu")
names(searchTerms)<-searchTerms
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=10)
})
tweetFrames<-lapply(searchResults, twListToDF)
tweetFrames <- lapply(tweetFrames, function(df){
df$timeStamp <- ymd_hms(as.character(df$created))
return(df)
})
nTweets <- unlist(lapply(tweetFrames, function(df){
nrow(df)
}))
timeElapsed <- unlist(lapply(tweetFrames, function(df){
as.numeric(diff(range(df$timeStamp)), units = "secs")
}))
tweetsPerSec <- nTweets
plot(tweetsPerSec, type="h", frame.plot=FALSE,  xaxt="n")
axis(1, labels=names(tweetsPerSec), at=c(1:5))
flu<-(unclass(tweetFrames$flu$timeStamp)-1356100000)
searchTerms<-c("Chemical Weapon", "chemical weapons", "OPCW", "opcw")
names(searchTerms)<-searchTerms
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=10)
})
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=1000)
})
searchTerms<-c("Chemical Weapon", "chemical weapons", "OPCW")
names(searchTerms)<-searchTerms
searchResults<-lapply(searchTerms, function(tt){
print(tt)
searchTwitter(searchString=tt, n=1000)
})
tweetFrames<-lapply(searchResults, twListToDF)
tweetFrames <- lapply(tweetFrames, function(df){
df$timeStamp <- ymd_hms(as.character(df$created))
return(df)
})
nTweets <- unlist(lapply(tweetFrames, function(df){
nrow(df)
}))
timeElapsed <- unlist(lapply(tweetFrames, function(df){
as.numeric(diff(range(df$timeStamp)), units = "days")
}))
tweetsPerSec <- nTweets
plot(tweetsPerSec, type="h", frame.plot=FALSE,  xaxt="n")
axis(1, labels=names(tweetsPerSec), at=c(1:5))
flu<-(unclass(tweetFrames$flu$timeStamp)-1356100000)
tweetFrames<-lapply(searchResults, twListToDF)
tweetFrames <- lapply(tweetFrames, function(df){
df$timeStamp <- ymd_hms(as.character(df$created))
return(df)
})
nTweets <- unlist(lapply(tweetFrames, function(df){
nrow(df)
}))
timeElapsed <- unlist(lapply(tweetFrames, function(df){
as.numeric(diff(range(df$timeStamp)), units = "secs")
}))
tweetsPerSec <- nTweets
plot(tweetsPerSec, type="h", frame.plot=FALSE,  xaxt="n")
axis(1, labels=names(tweetsPerSec), at=c(1:5))
axis(1, labels=names(tweetsPerSec))
axis(1, labels=names(tweetsPerSec), at=c(1:3))
CW <-(unclass(tweetFrames$Chemical Weapon$timeStamp)-1356100000)
CW <-(unclass(tweetFrames$ChemicalWeapon$timeStamp)-1356100000)
head(tweetFrames)
colname(tweetFrames)
ColName(tweetFrames)
ColNames(tweetFrames)
colnames(tweetFrames)
CW <-(unclass(tweetFrames$opcw$timeStamp)-1356100000)
CW <-(unclass(tweetFrames$timeStamp)-1356100000)
searchTerm <- "#opcw"
searchResults <- searchTwitter(searchTerm, n = 1000)
searchTerm <- "opcw"
searchResults <- searchTwitter(searchTerm, n = 1000)
tweetFrame <- twListToDF(searchResults)
View(tweetFrame)
userInfo <- lookupUsers(tweetFrame$screenName)
userFrame <- twListToDF(userInfo)
View(userFrame)
locatedUsers <- !is.na(userFrame$location)
locations <- geocode(userFrame$location[locatedUsers])
View(locations)
plot(locations$lon, locations$lat)
p1 <- ggplot(worldMap)
p2 <- p1 + geom_path(aes(x = long, y = lat, group = group),
colour = gray(2/3), lwd = 1/3)
p3 <- p2 + geom_point(data = locations,
aes(x = lon, y = lat),
colour = "RED", alpha = 1/2, size = 1)
print(p3)
library("ggmap")
library(maptools)
library(maps)
install.packages("ggmap")
library("ggmap")
library("geocode")
install.packages("geocodeHERE")
library("geocodeHERE")
library("ggmap")
library(maptools)
install.packages("maptools")
library(maptools)
library(dismo)
library(maps)
p1 <- ggplot(worldMap)
p2 <- p1 + geom_path(aes(x = long, y = lat, group = group),
colour = gray(2/3), lwd = 1/3)
p3 <- p2 + geom_point(data = locations,
aes(x = lon, y = lat),
colour = "RED", alpha = 1/2, size = 1)
print(p3)
consumerKey = "TnhFkCkWw5XiRjaaU6MVFJXrb"   # from your app name
consumerSecret = "8T2gfZ7hpCRAYcBQbkfURnyT3ylaHEa8BsO2akLz6gll6kN2OM"
accessToken = "377053028-LZYBzp2rcwn3sG103AVVdUvWHYrOBHLhNPP2wq5S"
accessSecret = "eFD67fq59GaltQj45I5F5eT8wEEdlCxEG3bRE3qod8ZVo"
setup_twitter_oauth(consumer_key = consumerKey, consumer_secret = consumerSecret,
access_token = accessToken, access_secret = accessSecret)
searchTerm <- "opcw"
searchResults <- searchTwitter(searchTerm, n = 1000)
tweetFrame <- twListToDF(searchResults)
library(stats)
library(base)
library(xml2)
library(rvest)
library(dplyr)
library(stats)
library(base)
library(xml2)
library(rvest)
library(dplyr)
library(sp)
library(raster)
library(twitteR)
library(lubridate)
library(RJSONIO)
library(ggplot2)
library(dismo)
library(maps)
library("geocodeHERE")
library("ggmap")
library(maptools)
setwd("./GitHub/Persian-Gardens")
setwd("./GitHub")
setwd("..")
setwd("./GitHub")
ls
ls()
getwd()
setwd("..")
getwd()
text <- read.table("./GitHub/Donald Wilber Report.txt", header=T)
text <- read.table("./Donald Wilber Report.txt", header=T)
setwd("./GitHub")
text <- read.table("Donald Wilber Report.txt", header=T)
text <- read.table("Donald Wilber Report.txt", header=F)
text <- read.table("Donald Wilber Report.txt", header=F, sep="/t")
text <- read.table("Donald Wilber Report.txt", header=F, sep="\t")
View(text)
text <- read.table("Donald Wilber Report.txt", header=F)
conn <- file(fileName,open="r")
fileName = "Donald Wilber Report.txt"
conn <- file(fileName,open="r")
linn <-readLines(conn)
for (i in 1:length(linn)){
print(linn[i])
}
close(conn)
res <- readLines(system.file("Donald Wilber Report.txt", package="MASS"))
summary(linn)
head(linn)
linn(100)
linn[100]
print linn
print(linn)
setwd("./GitHub")
fileName = "Donald Wilber Report.txt"
conn <- file(fileName,open="r")
text <-readLines(conn)
for (i in 1:length(linn)){
print(linn[i])
}
print(text[i])
for (i in 1:length(text)){
print(text[i])
}
close(conn)
close(conn)
setwd("./GitHub/Persian-Gardens")
setwd("./Persian-Gardens")
corpus <- Corpus(text)
library(NLP)
corpus <- Corpus(text)
library(tm)
corpus <- Corpus(text)
txt2 <- system.file("Donald Wilber Report.txt", "txt", package = "tm")
summary(txt2)
setwd("./GitHub")
setwd("..")
txt2 <- system.file("Donald Wilber Report.txt", "txt", package = "tm")
setwd("~/GitHub")
txt2 <- system.file("Donald Wilber Report", "txt", package = "tm")
sumamry(txt2)
summary(txt2)
a  <-Corpus(DirSource("Donald Wilber Report.txt"), readerControl = list(language="Eng"))#Extract the Corpus
setwd("~/GitHub")
a  <-Corpus(DirSource("Donald Wilber Report.txt"), readerControl = list(language="Eng"))#Extract the Corpus
a  <-Corpus(DirSource("./Donald Wilber Report.txt"), readerControl = list(language="Eng"))#Extract the Corpus
a  <-Corpus(DirSource("/Donald Wilber Report.txt"), readerControl = list(language="Eng"))#Extract the Corpus
source <- DirSource("/GitHub")
setwd("~/")
source <- DirSource("./GitHub")
source <- DirSource("./GitHub/Donald Wilber Report.txt")
source <- DirSource("./GitHub")
YourCorpus <- Corpus(source, readerControl=list(reader=readPlain))
summary(YourCorpus)
print(YourCorpus)
text3 <- read.delim("Donald Wilber Report.txt", sep = "/t")
setwd("./GitHub")
YourCorpus
text3 <- read.delim("Donald Wilber Report.txt", sep = "/t")
setwd("~/GitHub")
text3 <- read.delim("Donald Wilber Report.txt", sep = "/t")
text3 <- read.delim("Donald Wilber Report.txt", sep = " ")
t
text3 <- read.delim("Donald Wilber Report.txt", sep = "/t")
text_corpus <- Corpus(VectorSource(text), readerControl = list(language = "en"))
library(NLP)
library(tm)
#read the text file
setwd("./GitHub")
setwd("..")
fileName = "Donald Wilber Report.txt"
conn <- file(fileName,open="r")
text <-readLines(conn)
close(conn)
setwd("./GitHub")
conn <- file(fileName,open="r")
text <-readLines(conn)
close(conn)
setwd("~/GitHub")
fileName = "Donald Wilber Report.txt"
conn <- file(fileName,open="r")
text <-readLines(conn)
close(conn)
setwd("./Persian-Gardens")
text_corpus <- Corpus(VectorSource(text), readerControl = list(language = "en"))
text_corpus <- tm_map(text_corpus, stripWhitespace)
text_corpus <- Corpus(VectorSource(text), readerControl = list(language = "en"))
clean.corpus <- function(txt){
text_corpus <- tm_map(text_corpus, stemDocument)
text_corpus <- tm_map(text_corpus, removeWords, c(stopwords("english"), stopwords("SMART")))
text_corpus <- tm_map(text_corpus, removePunctuation)
text_corpus <- tm_map(text_corpus, removeNumbers)
text_corpus <- tm_map(text_corpus, stripWhitespace)
assign('text_corpus',text_corpus,envir=.GlobalEnv)
}
clean.corpus(text_corpus)
TDM <- TermDocumentMatrix(text_corpus,control = list(removePunctuation = TRUE,stopwords = TRUE))
inspect(TDM)
word.frequency(TDM)
word.frequency <- function (TDM){
temp <- inspect(TDM)
word.frequency <- data.frame(ST = rownames(temp), Freq = rowSums(temp))
row.names(word.frequency) <- NULL
word.frequency <- word.frequency[order(-word.frequency$Freq),]
assign('word.frequency',word.frequency,envir=.GlobalEnv)
}
word.frequency(TDM)
View(word.frequency)
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(word.frequency, "./WordFrequency.xlsx")
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=100)
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=100)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=100)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=100)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=200)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=300)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=500)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=1000)
wordcloud(word.frequency$ST, word.frequency$Freq,max.words=1000)
clear
